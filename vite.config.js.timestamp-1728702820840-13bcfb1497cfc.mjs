// vite.config.js
import path from "path";
import { sveltekit } from "file:///C:/Users/harsh/Desktop/mkvcinemas/node_modules/.pnpm/@sveltejs+kit@2.6.4_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.19_vite@5.4.8__svelte@4.2.19_vite@5.4.8/node_modules/@sveltejs/kit/src/exports/vite/index.js";
import svg from "file:///C:/Users/harsh/Desktop/mkvcinemas/node_modules/.pnpm/@poppanator+sveltekit-svg@4.2.1_rollup@4.24.0_svelte@4.2.19_svgo@3.3.2_vite@5.4.8/node_modules/@poppanator/sveltekit-svg/dist/index.js";
import fs from "fs";
var config = {
  resolve: {
    alias: {
      $icons: path.resolve("./src/icons"),
      $utils: path.resolve("./src/utils")
    }
  },
  plugins: [sveltekit(), svg(svgPluginOptions), rawFonts([".ttf"])]
};
function rawFonts(ext) {
  return {
    name: "vite-plugin-raw-fonts",
    transform(code, id) {
      if (ext.some((e) => id.endsWith(e))) {
        const buffer = fs.readFileSync(id);
        return { code: `export default ${JSON.stringify(buffer)}`, map: null };
      }
    }
  };
}
var svgPluginOptions = {
  svgoOptions: {
    plugins: [
      {
        name: "preset-default",
        params: {
          overrides: {
            removeViewBox: false
          }
        }
      },
      "removeDimensions"
    ]
  }
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxoYXJzaFxcXFxEZXNrdG9wXFxcXG1rdmNpbmVtYXNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGhhcnNoXFxcXERlc2t0b3BcXFxcbWt2Y2luZW1hc1xcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvaGFyc2gvRGVza3RvcC9ta3ZjaW5lbWFzL3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCB7IHN2ZWx0ZWtpdCB9IGZyb20gJ0BzdmVsdGVqcy9raXQvdml0ZSc7XHJcbmltcG9ydCBzdmcgZnJvbSAnQHBvcHBhbmF0b3Ivc3ZlbHRla2l0LXN2Zyc7XHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcblxyXG4vKiogQHR5cGUge2ltcG9ydCgndml0ZScpLlVzZXJDb25maWd9ICovXHJcbmNvbnN0IGNvbmZpZyA9IHtcclxuXHRyZXNvbHZlOiB7XHJcblx0XHRhbGlhczoge1xyXG5cdFx0XHQkaWNvbnM6IHBhdGgucmVzb2x2ZSgnLi9zcmMvaWNvbnMnKSxcclxuXHRcdFx0JHV0aWxzOiBwYXRoLnJlc29sdmUoJy4vc3JjL3V0aWxzJylcclxuXHRcdH1cclxuXHR9LFxyXG5cdHBsdWdpbnM6IFtzdmVsdGVraXQoKSwgc3ZnKHN2Z1BsdWdpbk9wdGlvbnMpLCByYXdGb250cyhbJy50dGYnXSldLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gcmF3Rm9udHMoZXh0KSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdG5hbWU6ICd2aXRlLXBsdWdpbi1yYXctZm9udHMnLFxyXG5cdFx0dHJhbnNmb3JtKGNvZGUsIGlkKSB7XHJcblx0XHRcdGlmIChleHQuc29tZSgoZSkgPT4gaWQuZW5kc1dpdGgoZSkpKSB7XHJcblx0XHRcdFx0Y29uc3QgYnVmZmVyID0gZnMucmVhZEZpbGVTeW5jKGlkKTtcclxuXHRcdFx0XHRyZXR1cm4geyBjb2RlOiBgZXhwb3J0IGRlZmF1bHQgJHtKU09OLnN0cmluZ2lmeShidWZmZXIpfWAsIG1hcDogbnVsbCB9O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuY29uc3Qgc3ZnUGx1Z2luT3B0aW9ucyA9IHtcclxuXHRzdmdvT3B0aW9uczoge1xyXG5cdFx0cGx1Z2luczogW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0bmFtZTogJ3ByZXNldC1kZWZhdWx0JyxcclxuXHRcdFx0XHRwYXJhbXM6IHtcclxuXHRcdFx0XHRcdG92ZXJyaWRlczoge1xyXG5cdFx0XHRcdFx0XHRyZW1vdmVWaWV3Qm94OiBmYWxzZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0J3JlbW92ZURpbWVuc2lvbnMnXHJcblx0XHRdXHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xyXG5cclxuXHJcblxyXG4vLyBpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuLy8gaW1wb3J0IHsgc3ZlbHRla2l0IH0gZnJvbSAnQHN2ZWx0ZWpzL2tpdC92aXRlJztcclxuLy8gaW1wb3J0IHN2ZyBmcm9tICdAcG9wcGFuYXRvci9zdmVsdGVraXQtc3ZnJztcclxuLy8gaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuXHJcbi8vIGNvbnN0IHN2Z1BsdWdpbk9wdGlvbnMgPSB7XHJcbi8vIFx0c3Znb09wdGlvbnM6IHtcclxuLy8gXHRcdHBsdWdpbnM6IFtcclxuLy8gXHRcdFx0e1xyXG4vLyBcdFx0XHRcdG5hbWU6ICdwcmVzZXQtZGVmYXVsdCcsXHJcbi8vIFx0XHRcdFx0cGFyYW1zOiB7XHJcbi8vIFx0XHRcdFx0XHRvdmVycmlkZXM6IHtcclxuLy8gXHRcdFx0XHRcdFx0cmVtb3ZlVmlld0JveDogZmFsc2VcclxuLy8gXHRcdFx0XHRcdH1cclxuLy8gXHRcdFx0XHR9XHJcbi8vIFx0XHRcdH0sXHJcbi8vIFx0XHRcdCdyZW1vdmVEaW1lbnNpb25zJ1xyXG4vLyBcdFx0XVxyXG4vLyBcdH1cclxuLy8gfTtcclxuXHJcbi8vIC8qKiBAdHlwZSB7aW1wb3J0KCd2aXRlJykuVXNlckNvbmZpZ30gKi9cclxuLy8gY29uc3QgY29uZmlnID0ge1xyXG4vLyBcdHJlc29sdmU6IHtcclxuLy8gXHRcdGFsaWFzOiB7XHJcbi8vIFx0XHRcdCRpY29uczogcGF0aC5yZXNvbHZlKCcuL3NyYy9pY29ucycpLFxyXG4vLyBcdFx0XHQkdXRpbHM6IHBhdGgucmVzb2x2ZSgnLi9zcmMvdXRpbHMnKVxyXG4vLyBcdFx0fVxyXG4vLyBcdH0sXHJcbi8vIFx0cGx1Z2luczogW3N2ZWx0ZWtpdCgpLCBzdmcoc3ZnUGx1Z2luT3B0aW9ucyksIHJhd0ZvbnRzKFsnLnR0ZiddKV0sXHJcbi8vIFx0bGVnYWN5OiB7IGJ1aWxkU3NyQ2pzRXh0ZXJuYWxIZXVyaXN0aWNzOiB0cnVlIH1cclxuLy8gfTtcclxuXHJcbi8vIGZ1bmN0aW9uIHJhd0ZvbnRzKGV4dCkge1xyXG4vLyBcdHJldHVybiB7XHJcbi8vIFx0XHRuYW1lOiAndml0ZS1wbHVnaW4tcmF3LWZvbnRzJyxcclxuLy8gXHRcdHRyYW5zZm9ybShjb2RlLCBpZCkge1xyXG4vLyBcdFx0XHRpZiAoZXh0LnNvbWUoKGUpID0+IGlkLmVuZHNXaXRoKGUpKSkge1xyXG4vLyBcdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IGZzLnJlYWRGaWxlU3luYyhpZCk7XHJcbi8vIFx0XHRcdFx0cmV0dXJuIHsgY29kZTogYGV4cG9ydCBkZWZhdWx0ICR7SlNPTi5zdHJpbmdpZnkoYnVmZmVyKX1gLCBtYXA6IG51bGwgfTtcclxuLy8gXHRcdFx0fVxyXG4vLyBcdFx0fVxyXG4vLyBcdH07XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IGNvbmZpZztcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUErUixPQUFPLFVBQVU7QUFDaFQsU0FBUyxpQkFBaUI7QUFDMUIsT0FBTyxTQUFTO0FBQ2hCLE9BQU8sUUFBUTtBQUdmLElBQU0sU0FBUztBQUFBLEVBQ2QsU0FBUztBQUFBLElBQ1IsT0FBTztBQUFBLE1BQ04sUUFBUSxLQUFLLFFBQVEsYUFBYTtBQUFBLE1BQ2xDLFFBQVEsS0FBSyxRQUFRLGFBQWE7QUFBQSxJQUNuQztBQUFBLEVBQ0Q7QUFBQSxFQUNBLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakU7QUFFQSxTQUFTLFNBQVMsS0FBSztBQUN0QixTQUFPO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixVQUFVLE1BQU0sSUFBSTtBQUNuQixVQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHO0FBQ3BDLGNBQU0sU0FBUyxHQUFHLGFBQWEsRUFBRTtBQUNqQyxlQUFPLEVBQUUsTUFBTSxrQkFBa0IsS0FBSyxVQUFVLE1BQU0sQ0FBQyxJQUFJLEtBQUssS0FBSztBQUFBLE1BQ3RFO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFDRDtBQUVBLElBQU0sbUJBQW1CO0FBQUEsRUFDeEIsYUFBYTtBQUFBLElBQ1osU0FBUztBQUFBLE1BQ1I7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLFFBQVE7QUFBQSxVQUNQLFdBQVc7QUFBQSxZQUNWLGVBQWU7QUFBQSxVQUNoQjtBQUFBLFFBQ0Q7QUFBQSxNQUNEO0FBQUEsTUFDQTtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQ0Q7QUFFQSxJQUFPLHNCQUFROyIsCiAgIm5hbWVzIjogW10KfQo=
